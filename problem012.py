##Status: Solved
##Problem: The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
##
##1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
##
##Let us list the factors of the first seven triangle numbers:
##
## 1: 1
## 3: 1,3
## 6: 1,2,3,6
##10: 1,2,5,10
##15: 1,3,5,15
##21: 1,3,7,21
##28: 1,2,4,7,14,28
##We can see that 28 is the first triangle number to have over five divisors.
##
##What is the value of the first triangle number to have over five hundred divisors?

#Solution: The function will come up with a list of divisors and return the size of the list
def factors(x):
    list =[]
    for i in range(1,int(round(x**.5+1))):
        if x%i==0:
            list.append(i)
            list.append(x/i)
    return len(set(list))
i=1
n=500
#This while loop will determine the i^th triangular number(trinum)
#and determine how many divisors it has. if it has over 500 divisors, the program will print the triangular number
while i>0:
    trinum=int((i*(i+1))/2)
    if factors(trinum)>n:
        print(trinum)
        break
    i+=1
